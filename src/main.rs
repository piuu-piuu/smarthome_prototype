//
// Библиотека предоставляет структуру дома в комнатах которого расположены устройства.
// Дом имеет название и содержит несколько помещений.
// Библиотека позволяет запросить список помещений в доме.
// Помещение имеет уникальное название и содержит названия нескольких устройств.
// Устройство имеет уникальное в рамках помещения имя.
// Библиотека позволяет получать список устройств в помещении.
// Библиотека имеет функцию, возвращающую текстовый отчёт о состоянии дома.
// Эта функция принимает в качестве аргумента обобщённый тип, позволяющий получить
// текстовую информацию о состоянии устройства, для включения в отчёт.
// Эта информация должна предоставляться для каждого устройства на основе данных
// о положении устройства в доме: имени комнаты и имени устройства.
// Если устройство не найдено в источнике информации, то вместо текста о состоянии вернуть сообщение об ошибке.
// Шаблон для описания сущностей библиотеки: https://gist.github.com/76dff7177f19ff7e802b1e121865afe4
// Общие требования:
//      На экран выводится список комнат и устройств в них.
//      На экран выводится отчёт о состоянии дома.
//      Утилита cargo clippy не выдаёт предупреждений.
//      Команда cargo fmt --check --all не выдаёт предупреждений.

// Домашнее задание 1 : делим и тестируем прототип "умного дома"
//      Разделить логически целостные элементы библиотеки ""умный дом"" на отдельные файлы.
//      Покрыть тестами требования к библиотеке.
//      Создать example использования библиотеки.
// Статус "Принято" ставится, если:
//      Код логически верно разбит на модули.
//      Написаны тесты для функционала библиотеки.
//      В примере инициализируется "Умный дом" и источник информации об устройствах.
// Домашнее задание 2 : обработка ошибок в прототипе "умного дома"
//      Функции библиотеки ""умный дом"" должны возвращать Option в случае, если есть вероятность не получить результат.
//      Функции библиотеки ""умный дом"" должны возвращать Result в случае, если отсутствие результата может быть вызвано различными причинами.
// Статус "Принято" ставится, если:
//      Функции, которые могут не выполнить своё назначение, возвращают Option или Result.
//      Типы ошибок реализуют трейт Error.

pub mod info;
pub mod smarthouse;
use info::devices::{SmartSocket, SmartThermometer};
use info::{BorrowingDeviceInfoProvider, OwningDeviceInfoProvider};
use smarthouse::SmartHouse;
// use std::collections::HashMap;

fn main() {
    // Инициализация устройств
    let socket1 = SmartSocket {
        name: "socket1",
        info: "SmartSocket",
    };
    let socket2 = SmartSocket {
        name: "socket2",
        info: "SmartSocket",
    };
    let thermo = SmartThermometer {
        name: "thermo",
        info: "SmartThermometer",
    };

    // Инициализация дома
    let house = SmartHouse::new();

    // Строим отчёт с использованием `OwningDeviceInfoProvider`.
    let info_provider_1 = OwningDeviceInfoProvider { socket: socket1 };
    let report1 = house.create_report(&info_provider_1);

    // Строим отчёт с использованием `BorrowingDeviceInfoProvider`.
    let info_provider_2 = BorrowingDeviceInfoProvider {
        socket: &socket2,
        thermo: &thermo,
    };

    let report2 = house.create_report(&info_provider_2);

    house.print_rooms_with_devices();
    // Выводим отчёты на экран:
    println!("Report #1:\n{report1}");
    println!("Report #2:\n{report2}");
}
